Hoisting 

*VARIABLES*

console.log(name) // O valor da variável torna-se UNDEFINED. 
console.log(sexo) // Apresenta erro ao tentar ler variável antes da declaração
console.log(apelido) // Apresenta erro ao tentar ler variável antes da declaração

let sexo = "masculino";
const apelido = "cleiton"
var name = "cleiton";

------------------------------------------------------------------------------------------------


*HOISTING WITH FUNCTIONS* 

showname() // Execultada normalmente
showPhrase() // Apresenta erro ao tentar ler variável antes da declaração
showAddress() // Apresenta erro ao tentar ler variável antes da declaração

function showname() {
  console.log("Meu nome é Fred")
}


const showPhrase = () => {
  console.log("Hello World!")
}


let showAddress = function(){
  console.log("Av Amazonas")
}


--** VARIAVEL DENTRO DA FUNÇÃO COM ESCOPO GLOBAL ? 

function(){
  idade = 30
}
console.log(idade)
------------------------------------------------------------------------------------------------

Funções são FIRST CLASS OBJECT ( Objetos de primeira classe ), significa que as funções são tratadas como dado

Funções podem receber outras funções como parâmetro. 
Exemplo abaixo: 

function showWord(name){
  console.log(`Hello world! ${name}`);
};


const executaFuncao = (fn) => {
  fn("Cleiton")
} 

executaFuncao(showWord)



------------------------------------------------------------------------------------------------

const pessoa = {
  name: function(){
    console.log("Hello world")  
  },
  
  
  sexo(){
    console.log("Masculino")
  }

}



pessoa.name() // Essa função é o valor da chave NAME no objeto
pessoa.sexo() // Essa função nãpo possue chave, foi declarada diretamente no objeto. 





------------------------------------------------------------------------------------------------
--PARAMETROS DA FUNÇÃO

** Nenhum parâmetro foi passado para a função, porém foi possível passar argumentos, utilizando o "arguments". **
É possível iterar sobre eles. [ OBS. Somente quando declaramos a função com a palavra FUNCTION] 
** O dado ARGUMENTS, é do tipo "Array like", mas não é um array, nem um objeto. 
Por isso é possível percorrê-lo com for, for in, for of... Mas não possui métodos como filter, map, reduce, ...
** 'length in arguments' -> verifica se o objeto 'arguments' possui o método 'length', MUITO ÚTIL. 



function x (){
  
  let total = 0
  for (let arg of arguments){
    total+=arg 
     console.log(total)
  }
}



x(1,2,3,4,5,6,7)
x("C", "L", "E", "I", "T", "O", "N")



**



function paramClass(a,b = 2,c = 4){
  console.log(a,b,c)
  console.log(arguments)
}

paramClass() // Se não passo nenhum parametro, o dado deles vem como undefined. 

paramClass(1,2,3,4,5,6) // Se passo mais argumentos que preciso, ele os desconsidera 

paramClass(10,undefined,10) // se eu quiser pular um parâmetro, posso utilizar o undefined. 

//OBS. Caso eu passe mais argumentos que parâmetros, o JS irá armazenar ambos no objeto arguments



**
**


Desestruturando parâmetros na função

function fn([valor1, valor2, valor3]){
  console.log(valor1,  valor2, valor3)
}
fn([23, 10, 34])





O rest operator ( ... ) vai inserir elementos específicos no parêtro da fn em um array (deve ser o último parametro da função)

function conta(operador, acumulador, ...numeros){
  console.log(operador, acumulador, numeros)
}

conta("+", 0, 30, 40, 60)





Alternativa ao ARGUMENTS nativo do JS ( Funciona com todos os tipos de função)
const fn = (...args) => {
  console.log(args)
}

fn("a", "b, 12,1,1,1")

------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------


--RETORNO DA FUNÇÃO


Exemplo com uma função dentro de outra:

function criaMultiplicador(multiplicador) {
  return function (n) {
    return n * multiplicador;
  };
}
const duplica = criaMultiplicador(2);
const triplica = criaMultiplicador(3);
const quatriplica = criaMultiplicador(4);

console.log(duplica(5));
console.log(triplica(10));
console.log(quatriplica(50));



------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------



--CLOSURE
Closure: As É o "poder" que as "Subfunções" tem de acessar seus escopos,exemplo abaixo, a função anônima pode acessar 3 escopos, o da função 
"pai" e o escopo global. 



function myFuncton() {
  let name = "Cleiton";

  return function () {
    return name;
  };
}

const funcao = myFuncton();
console.dir(funcao); // semelhante ao console.log()


// dados no navegador... abaixo

Scopes[3]
0
: 
Closure (myFuncton) {name: 'Cleiton'} // Escopo da função pai/Mãe
1
: 
Script {funcao: ƒ} // nível da função filha, seexistisse outra função nomesmo nível, ela poderia acessá-la
2
: 
Global {window: Window, self: Window, document: document, name: '', location: Location, …} // Escopo global


-----------------------------------------------------
OUTRO EXEMPLO A BAIXO

const fn = (name) => {
  
  return function(){
    return name
  }
}

const fisrt_name = fn("Cleton")
const fisrt_name2 = fn("Polyana")
console.log(fisrt_name() + " - " + fisrt_name2()) //Cleiton - Polyana




------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

--FUNCOES CALLBACK 


A baixo está um exemplo de como controlar a ordem de execução de funções que em tese não teriamos controle sobre 
o tempo em que elas seriam executadas, simulamos um tempo aleatório com o setTimeout. 




function range(max=2000, min=1000){
  return Math.floor(Math.random() * (max - min) + min)
}


function f1(callback){
  setTimeout(function() {
    console.log("f1")
    if (callback) callback()
  }, range());
}


function f2(callback){
  setTimeout(function() {
    console.log("f2")
    if(callback) callback()
  }, range());
}


function f3(callback){
  setTimeout(function() {
    console.log("f3")
    if(callback) callback()
  }, range());
}


f1(function(){
  f2(function(){
    f3(function(){
      console.log("Hello world")
    })
  })
})


* Uma forma mais organizada, para evitar o "CALLBACK HELL" seria criar a função callback separada, depois chamá-la junto com as funções f1,f2,f3. 



f1()
f2()
f3()


------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

--FUNCÔES IMEDIATAS (IIFE)

(function(){
  console.log("Hello world")
})()

Envolva a função com parênteses, ela será invocada 
imediatamente e o escopo global estará protegido

É possível passar parâmetros
(function(idade, peso, altura){
  console.log("Hello world")
})(39, 90, 1.80)

Podem serutilizadas quantas funções forem necessárias,
de acordo com a necessidade. 







------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

-- FUNCOES DE FÁBRICA / FACTORY FUNCTIONS
Funções de fabrica - factory functions 


São funções que retornam objetos

Não precisa da palavra "New" ao instanciar objetos 

Exemplo de código de uma calculadora 


function calculator() {
  return {
    display: document.querySelector(".row-screen"),

    startCalculator() {
      this.backSpace();
      this.enter(), this.btnClicks();
    },
    
    enter() {
      this.display.addEventListener("keyup", (e) => {
        if (e.keyCode === 13) {
          this.countMaths();
        }
      });
    },
    btnClicks() {
      document.addEventListener("click", (e) => {
        const textButton = e.target.innerText;
        if (e.target.classList.contains("num")) {
          this.btnToDisplay(textButton);
        }
        if (e.target.classList.contains("btn-c")) {
          this.clearDisplay();
        }

        if (e.target.classList.contains("clear-one")) {
          this.clearOne();
        }

        if (e.target.classList.contains("result")) {
          this.countMaths();
        }
      });
    },
    countMaths() {
      try {
        let count = eval(this.display.value);
        if (!count) {
          alert("Conta inválida!");
        }
        this.display.value = count;
      } catch (error) {
        console.log(error);
        alert("Conta inválida!");
      }
    },
    clearDisplay() {
      this.display.value = "";
    },
    clearOne() {
      this.display.value = this.display.value.slice(0, -1);
    },
    btnToDisplay(value) {
      this.display.value += value;
    },
  };
}

const calc = calculator();
calc.startCalculator();


------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

--FUNCOES CONTRUTORAS

Função que constrói objetos
Precisa da palavra NEW para instanciar 
É possível criar atributos ou métodos privados ( basta não utilizar o this.atributo/this.metodo), utilizando o const, let, etc...

function Calculator() {
  this.display = document.querySelector(".row-screen");

  this.startCalculator = function () {
    this.backSpace();
    this.enter(), this.btnClicks();
  };
  this.backSpace = function () {};
  this.enter = function () {
    this.display.addEventListener("keyup", (e) => {
      if (e.keyCode === 13) {
        this.countMaths();
      }
    });
  };
  this.btnClicks = function () {
    document.addEventListener("click", (e) => {
      const textButton = e.target.innerText;
      if (e.target.classList.contains("num")) {
        this.btnToDisplay(textButton);
      }
      if (e.target.classList.contains("btn-c")) {
        this.clearDisplay();
      }

      if (e.target.classList.contains("clear-one")) {
        this.clearOne();
      }

      if (e.target.classList.contains("result")) {
        this.countMaths();
      }
    });
  };
  this.countMaths = function () {
    try {
      let count = eval(this.display.value);
      if (!count) {
        alert("Conta inválida!");
      }
      this.display.value = count;
    } catch (error) {
      console.log(error);
      alert("Conta inválida!");
    }
  };
  this.clearDisplay = function () {
    this.display.value = "";
  };
  this.btnToDisplay = function (value) {
    this.display.value += value;
  };
  this.clearOne = function () {
    this.display.value = this.display.value.slice(0, -1);
  };
}

const calc = new Calculator();
calc.startCalculator();



------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------


--Funções RECURSIVAS 

São funções que são chamadas dentro de si mesmas, dentro de seu escopo. 
É preciso programar um limite para sua execução, como no exemplo a seguir..

const recursiva  = (max) =>{
  if (max >= 10) return 
  max++;
  console.log(max);
recursiva(max)  
}


recursiva(0)


SAÍDA: 

Output:

1
2
3
4
5
6
7
8
9
10


------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------


--Funções GERADORAS (generator functions) 

Funções que possibilitam o controle de execução, sua sintaxe é diferente


function* geradora1(){
  yield 'Valor 1'

  yield 'Valor 2'

  yield 'Valor 3'
}


function* geradora2(){
  let i = 0;

  while (true) {
    yield i;
    i++
  }
}

------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------



